/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaGUI;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sylvester
 */
public class AssistManagerAccountModification extends javax.swing.JFrame {
    private List<String[]> users = new ArrayList<>();
    private static final String FILE_PATH = "ApprovalList.txt";
    String AManagerID;
    /**
     * Creates new form ManagerAccountModification
     */
    public AssistManagerAccountModification() {
        initComponents();
        loadUsers();
        populateTable();
    }
    
    public AssistManagerAccountModification(String userID) {
        initComponents();
        AManagerID = userID;
        loadUsers();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        UserID_input = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        DeleteAccountButton = new javax.swing.JButton();
        ConfirmEditDetails = new javax.swing.JButton();
        newRoleComboBox = new javax.swing.JComboBox<>();
        newNameTextField = new javax.swing.JTextField();
        newEmailTextField = new javax.swing.JTextField();
        newPhoneNoTextField = new javax.swing.JTextField();
        BackButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        newPasswordTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        SearchBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "UserID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Details:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("UserID: ");

        UserID_input.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UserID_input.setText("userID");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Email:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Role:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Phone Number:");

        DeleteAccountButton.setText("Delete Account");
        DeleteAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAccountButtonActionPerformed(evt);
            }
        });

        ConfirmEditDetails.setText("Confirm Edit Details");
        ConfirmEditDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmEditDetailsActionPerformed(evt);
            }
        });

        newRoleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Role", "AssistManager", "Staff", "Resident" }));
        newRoleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRoleComboBoxActionPerformed(evt);
            }
        });

        newNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newNameTextFieldActionPerformed(evt);
            }
        });

        BackButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/back arrow .png"))); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Password:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Search by ID:");

        searchField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        SearchBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BackButton)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(DeleteAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                                .addComponent(ConfirmEditDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(newRoleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(newEmailTextField)
                                            .addComponent(newNameTextField)
                                            .addComponent(newPhoneNoTextField)
                                            .addComponent(newPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(UserID_input, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BackButton)
                    .addComponent(jLabel8)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBtn))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UserID_input))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newRoleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newPhoneNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(newPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeleteAccountButton)
                            .addComponent(ConfirmEditDetails))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
        int selectedRowIndex = jTable1.getSelectedRow();
        loadUsers();
        String selectedUserID = (String) tableModel.getValueAt(selectedRowIndex, 1);
        String[] selectedUser = getUserID(selectedUserID);
        if (selectedUser != null) {
        // Do something with the selected user details
        UserID_input.setText(selectedUser[1]);
        newNameTextField.setText(selectedUser[0]);
        newRoleComboBox.setSelectedItem(selectedUser[2]);
        newEmailTextField.setText(selectedUser[5]);
        newPhoneNoTextField.setText(selectedUser[6]);
        newPasswordTextField.setText(selectedUser[3]);
        
    } else {
        JOptionPane.showMessageDialog(this, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void ConfirmEditDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmEditDetailsActionPerformed
        String newName = newNameTextField.getText();
        String newRole = (String) newRoleComboBox.getSelectedItem();
        String newEmail = newEmailTextField.getText();
        String newPhoneNo = newPhoneNoTextField.getText();
        String newPassword = newPasswordTextField.getText();
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to approve.",
                    "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String selectedUserID = (String) jTable1.getValueAt(selectedRow, 1);
        if (validateEditDetails(newName, newRole, newEmail, newPhoneNo,newPassword)) {
            String confirmationMessage = "Please confirm the details:\n\n" +
                                        "UserID: "+ selectedUserID + "\n"+
                                        "Name: " + newName + "\n" +
                                        "Role: " + newRole + "\n" +
                                        "Email: " + newEmail + "\n" +
                                        "Phone Number: " + newPhoneNo + "\n\n" +
                                        "Password: "+ newPassword + "\n\n" +
                                        "Do you want to proceed with saving these details?";
            int result = JOptionPane.showConfirmDialog(this, confirmationMessage, 
                            "Confirm Details", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                updateFile(selectedUserID,newName,newRole,newEmail,newPhoneNo,newPassword);
                JOptionPane.showMessageDialog(this, "Details saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadUsers();
                populateTable();
            } else {
                JOptionPane.showMessageDialog(this, "Save operation cancelled.", "Cancelled", JOptionPane.WARNING_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_ConfirmEditDetailsActionPerformed
    private void updateFile(String userID, String Name, String Role, String Email, String PhoneNo, String Password) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));
            PrintWriter writer = new PrintWriter(new FileWriter("temp.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userDetails = line.split(",");
                if (userDetails.length == 8 && userDetails[1].equals(userID)) {
                    userDetails[0] = Name ;
                    userDetails[2] = Role;
                    userDetails[5] = Email;
                    userDetails[6] = PhoneNo;
                    userDetails[3] = Password;
                    writer.println(String.join(",", userDetails));
                } else {
                    writer.println(line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating file: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        File originalFile = new File(FILE_PATH);
        File tempFile = new File("temp.txt");
        if (originalFile.delete() && tempFile.renameTo(originalFile)) {
            System.out.println("File updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error replacing the original file.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void newNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newNameTextFieldActionPerformed

    private void DeleteAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAccountButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to delete.",
                    "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String selectedUserID = (String) jTable1.getValueAt(selectedRow, 1);
        
        for (String[] user : users) {
            if (user[1].equals(selectedUserID)){
                String confirmationMessage = "Please confirm the account you want to delete:\n\n" +
                                    "UserID: "+ selectedUserID + "\n"+
                                    "Name: " +user[0] + "\n" +
                                    "Role: " + user[2] + "\n" +
                                    "Email: " + user[5] + "\n" +
                                    "Phone Number: " +user[6] + "\n\n" +
                                    "Do you want to proceed deleting this account?";
                int result = JOptionPane.showConfirmDialog(this, confirmationMessage, 
                        "Confirm Details", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    deleteFile(selectedUserID);
                    JOptionPane.showMessageDialog(this, "Details saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    loadUsers();
                    populateTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Delete operation cancelled.", "Cancelled", JOptionPane.WARNING_MESSAGE);
                }
                break;
            }
        }
    }//GEN-LAST:event_DeleteAccountButtonActionPerformed
    private void deleteFile(String userID) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));
            PrintWriter writer = new PrintWriter(new FileWriter("temp.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userDetails = line.split(",");
                if (userDetails.length == 8 && !userDetails[1].equals(userID)) {
                    writer.println(line);
                } 
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating file: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        File originalFile = new File(FILE_PATH);
        File tempFile = new File("temp.txt");
        if (originalFile.delete() && tempFile.renameTo(originalFile)) {
            System.out.println("User deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error replacing the original file.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void newRoleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRoleComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newRoleComboBoxActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        dispose();
        AssistManagerScreen AMScreen = new AssistManagerScreen(AManagerID);
        AMScreen.setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
        String searchText=searchField.getText().toLowerCase().trim();
        if (searchText.isEmpty()) {
            loadUsers();
            populateTable();
        }else{
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            tableModel.setRowCount(0);
            for (String[] user : users) {

                if (user[1].toLowerCase().trim().equals(searchText.toLowerCase().trim())){
                    String searchname = user[0];
                    String searchTP = user[1];
                    tableModel.addRow(new Object[]{searchname, searchTP});
                }
            }

        }
    }//GEN-LAST:event_SearchBtnActionPerformed
    
    private boolean validateEditDetails(String newName, String newRole, String newEmail, String newPhoneNo, String newPassword) {
        if (newName == null || newName.trim().isEmpty() || newName.equalsIgnoreCase("New Name")){
            JOptionPane.showMessageDialog(this, "Invalid Name: Please enter a valid name.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!newRole.equals("AssistManager") && !newRole.equals("Staff") && !newRole.equals("Resident")) {
        JOptionPane.showMessageDialog(this, "Invalid Role: Please select a valid role from the dropdown.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
        }
        if (newEmail == null || !newEmail.contains("@")) {
        JOptionPane.showMessageDialog(this, "Invalid Email: Email must contain '@'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
        }
        if (!newPhoneNo.matches("\\d{10,11}")) { // Regular expression for 10 or 11 digits
        JOptionPane.showMessageDialog(this, "Invalid Phone Number: Phone number must have 10 or 11 digits.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
        }
        if (newPassword.contains(",") || newPassword == null){
        JOptionPane.showMessageDialog(this, "Invalid Password: Password cannot contain (,)", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
        }
        return true;
    }
    private void populateTable() {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

        
        tableModel.setRowCount(0);

        for (String[] user : users) {
            tableModel.addRow(new Object[]{
                    user[0], 
                    user[1], 
                    
            });
        }
    }
    
    AssistantUserLoader assistmanagerLoader = new AssistantUserLoader(FILE_PATH);
    private void loadUsers() {
        users.clear();
        users.addAll(assistmanagerLoader.loadAllUsers()); 
    }
    
    private String[] getUserID(String userID) {
    for (String[] user : users) {
        if (user[1].equals(userID)) { 
            return user; 
        }
    }
    return null;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssistManagerAccountModification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssistManagerAccountModification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssistManagerAccountModification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssistManagerAccountModification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssistManagerAccountModification().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton ConfirmEditDetails;
    private javax.swing.JButton DeleteAccountButton;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JLabel UserID_input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField newEmailTextField;
    private javax.swing.JTextField newNameTextField;
    private javax.swing.JTextField newPasswordTextField;
    private javax.swing.JTextField newPhoneNoTextField;
    private javax.swing.JComboBox<String> newRoleComboBox;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
