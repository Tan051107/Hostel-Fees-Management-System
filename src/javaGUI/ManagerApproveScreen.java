/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaGUI;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sylvester
 */
public class ManagerApproveScreen extends javax.swing.JFrame {
    private List<String[]> unapprovedUsers = new ArrayList<>();
    private static final String FILE_PATH = "ApprovalList.txt";
    private String ManagerID;
    /**
     * Creates new form ManagerApproveScreen
     */
    public ManagerApproveScreen() {
        initComponents();
        loadUnapprovedUsers();
        populateTable();
    }
    
    public ManagerApproveScreen(String userID) {
        initComponents();
        ManagerID = userID;
        loadUnapprovedUsers();
        populateTable();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollbar1 = new java.awt.Scrollbar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        ApproveButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        rejectBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "UserID", "Role", "BirthDate", "Email", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(40);
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        ApproveButton.setText("Approve");
        ApproveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApproveButtonActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/back arrow .png"))); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        rejectBtn.setText("Reject");
        rejectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(rejectBtn)
                .addGap(163, 163, 163)
                .addComponent(ApproveButton)
                .addGap(245, 245, 245))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ApproveButton)
                    .addComponent(rejectBtn))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
        int selectedRowIndex = jTable1.getSelectedRow();
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void ApproveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApproveButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to approve.",
                    "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        
        String selectedUserID = (String) jTable1.getValueAt(selectedRow, 1);
        System.out.println(selectedUserID);
        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
        ApproveUpdateFile(selectedUserID);
         
        loadUnapprovedUsers();
        
        populateTable();
        
        
        JOptionPane.showMessageDialog(this, "User approved successfully!");
    }//GEN-LAST:event_ApproveButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        ManagerScreen MScreen = new ManagerScreen(ManagerID);
        MScreen.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rejectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectBtnActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to reject.",
                    "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String selectedUserID = (String) jTable1.getValueAt(selectedRow, 1);
        System.out.println(selectedUserID);
        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
        RejectUpdateFile(selectedUserID);
         
        loadUnapprovedUsers();
        
        populateTable();
        
        
        JOptionPane.showMessageDialog(this, "User Rejected Successfully!");
    }//GEN-LAST:event_rejectBtnActionPerformed
    
    
    private void populateTable() {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

        
        tableModel.setRowCount(0);

        
        for (String[] user : unapprovedUsers) {
            tableModel.addRow(new Object[]{
                    user[0], 
                    user[1], 
                    user[2], 
                    user[4], 
                    user[5], 
                    user[6]  
            });
        }
    }
    
    ManagerUserLoader managerLoader = new ManagerUserLoader(FILE_PATH);
    private void loadUnapprovedUsers() {
        unapprovedUsers.clear();
        unapprovedUsers.addAll(managerLoader.loadUnapprovedUsers());
    }
    
    private void ApproveUpdateFile(String userID) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));
             PrintWriter writer = new PrintWriter(new FileWriter("temp.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userDetails = line.split(",");
                if (userDetails.length == 8 && userDetails[1].equals(userID)) {
                    userDetails[7] = "Approved";
                    writer.println(String.join(",", userDetails));
                } else {
                    writer.println(line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating file: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

        
        File originalFile = new File(FILE_PATH);
        File tempFile = new File("temp.txt");
        if (originalFile.delete() && tempFile.renameTo(originalFile)) {
            System.out.println("File updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error replacing the original file.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void RejectUpdateFile(String userID) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));
             PrintWriter writer = new PrintWriter(new FileWriter("temp.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userDetails = line.split(",");
                if (userDetails.length == 8 && userDetails[1].equals(userID)) {
                    userDetails[7] = "Rejected";
                    writer.println(String.join(",", userDetails));
                } else {
                    writer.println(line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating file: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

        File originalFile = new File(FILE_PATH);
        File tempFile = new File("temp.txt");
        if (originalFile.delete() && tempFile.renameTo(originalFile)) {
            System.out.println("File updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error replacing the original file.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerApproveScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerApproveScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerApproveScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerApproveScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerApproveScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApproveButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton rejectBtn;
    private java.awt.Scrollbar scrollbar1;
    // End of variables declaration//GEN-END:variables
}
