/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaGUI;

import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author taniv
 */
public class residentViewPayment extends javax.swing.JFrame {
      
    String residentID;
    String [][] billArray;

    /**
     * Creates new form residentViewPayment
     */
    public residentViewPayment() {
        initComponents();
        this.setResizable(false);
    }
    
    public residentViewPayment(String userID){
        initComponents();
        this.setResizable(false);
        residentID = userID;
        txtToArray billList = new txtToArray();
        DefaultTableModel bill_table = (DefaultTableModel)billTable.getModel();
        try {
            billArray = billList.array("BillList.txt");
            for (int i =1;i<billArray.length;i++){
                if (billArray[i][1].equals(residentID)){
                    bill_table.addRow(billArray[i]);
                    
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(residentViewPayment.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        generateReceiptButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Name", "Student ID", "Payment Title", "Total", "Due Date", "Payment Status", "Payment Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(billTable);
        if (billTable.getColumnModel().getColumnCount() > 0) {
            billTable.getColumnModel().getColumn(2).setPreferredWidth(70);
        }

        generateReceiptButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generateReceiptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/receipt .png"))); // NOI18N
        generateReceiptButton.setText("GENERATE RECEIPT");
        generateReceiptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReceiptButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/back arrow .png"))); // NOI18N
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(backButton)
                        .addGap(0, 685, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(generateReceiptButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(generateReceiptButton)
                .addGap(17, 17, 17))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void generateReceiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReceiptButtonActionPerformed
        DefaultTableModel generateReceiptTable = (DefaultTableModel)billTable.getModel();
        int selectedRowIndex = billTable.getSelectedRow();
        System.out.println(selectedRowIndex);
        
            
        if (selectedRowIndex == -1){
            JOptionPane.showMessageDialog(null,"Please select a row to generate receipt","No row selected",JOptionPane.INFORMATION_MESSAGE);
        }

        else if (billTable.getSelectedRowCount()>1){
            JOptionPane.showMessageDialog(null,"Please select only one row to generate receipt","More than one row are selected",JOptionPane.INFORMATION_MESSAGE);
        }

        else{
            String selectedPaymentStatus = generateReceiptTable.getValueAt(selectedRowIndex,5).toString();
            if (!selectedPaymentStatus.equals("Completed")){
                JOptionPane.showMessageDialog(null,"Payment is not completed yet","Payment Incomplete",JOptionPane.INFORMATION_MESSAGE);
            }

            else{
                generateReceipt receipt = new generateReceipt(residentID,null,"Resident");
                receipt.name.setText(generateReceiptTable.getValueAt(selectedRowIndex,0).toString());
                receipt.ID.setText(generateReceiptTable.getValueAt(selectedRowIndex,1).toString());
                receipt.paymentTitle.setText(generateReceiptTable.getValueAt(selectedRowIndex,2).toString());
                receipt.amount.setText(generateReceiptTable.getValueAt(selectedRowIndex,3).toString());
                receipt.total.setText(generateReceiptTable.getValueAt(selectedRowIndex,3).toString());
                receipt.date.setText(generateReceiptTable.getValueAt(selectedRowIndex,6).toString());
                receipt.cashier.setText("-");
                receipt.show();
                dispose();
            }
        }
    }//GEN-LAST:event_generateReceiptButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        residentInterface resident_interface = new residentInterface(residentID);
        resident_interface.show();
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(residentViewPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(residentViewPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(residentViewPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(residentViewPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new residentViewPayment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    public javax.swing.JTable billTable;
    private javax.swing.JButton generateReceiptButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
