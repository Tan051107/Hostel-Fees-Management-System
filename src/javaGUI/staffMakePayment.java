/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaGUI;

import java.awt.Choice;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author taniv
 */
public class staffMakePayment extends javax.swing.JFrame {
     String searchUser;
     String [][] billArray;
     String staffID;
     String staffName;
     boolean returnInterface = true;

     

    /**
     * Creates new form staffMakePayment
     */
    public staffMakePayment() {
        initComponents();
        this.setResizable(false);
        txtToArray billList = new txtToArray();
         try {
             billArray = billList.array("BillList.txt");
         } catch (IOException ex) {
             Logger.getLogger(staffMakePayment.class.getName()).log(Level.SEVERE, null, ex);
         }
        System.out.println(Arrays.deepToString(billArray));
        DefaultTableModel bill_table = (DefaultTableModel)billTable.getModel();
        for (int i =1;i<billArray.length;i++){
            bill_table.addRow(billArray[i]);
    }
    }

    
    public staffMakePayment(String userID,String name){
        initComponents();
        this.setResizable(false);
        txtToArray billList = new txtToArray();
         try {
             billArray = billList.array("BillList.txt");
         } catch (IOException ex) {
             Logger.getLogger(staffMakePayment.class.getName()).log(Level.SEVERE, null, ex);
         }
        System.out.println(Arrays.deepToString(billArray));
        DefaultTableModel bill_table = (DefaultTableModel)billTable.getModel();
        for (int i =1;i<billArray.length;i++){
            bill_table.addRow(billArray[i]);
    }
        staffID = userID;
        staffName = name;
        System.out.println(staffID);
        
        
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        makepaymentButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        generateReceiptButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Name", "Student ID", "Payment Title", "Total", "Due Date", "Payment Status", "Payment Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(billTable);
        if (billTable.getColumnModel().getColumnCount() > 0) {
            billTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            billTable.getColumnModel().getColumn(1).setPreferredWidth(10);
            billTable.getColumnModel().getColumn(2).setPreferredWidth(70);
            billTable.getColumnModel().getColumn(3).setPreferredWidth(10);
            billTable.getColumnModel().getColumn(4).setPreferredWidth(10);
            billTable.getColumnModel().getColumn(5).setPreferredWidth(10);
            billTable.getColumnModel().getColumn(6).setPreferredWidth(10);
        }

        makepaymentButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        makepaymentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/online-payment .png"))); // NOI18N
        makepaymentButton.setText("MAKE PAYMENT");
        makepaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makepaymentButtonActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/add-symbol .png"))); // NOI18N
        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/search .png"))); // NOI18N
        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        generateReceiptButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generateReceiptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/receipt .png"))); // NOI18N
        generateReceiptButton.setText("GENERATE RECEIPT");
        generateReceiptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReceiptButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaGUI/images/back arrow .png"))); // NOI18N
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(backButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(185, 185, 185)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(72, 72, 72)
                                        .addComponent(makepaymentButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchButton)
                                        .addGap(44, 44, 44)
                                        .addComponent(generateReceiptButton)))))
                        .addGap(0, 191, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(makepaymentButton)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateReceiptButton)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
      addPayment add_payment = new addPayment(staffID,staffName); 
      add_payment.show();
      dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String userToSearch = JOptionPane.showInputDialog(null,"Enter the student ID of the resident","Search Bill",JOptionPane.QUESTION_MESSAGE);
        displayUserBill userBill = new displayUserBill();
        boolean userFound = true;
         try {
             userFound = userBill.isValidUser(userToSearch);
         } catch (IOException ex) {
             Logger.getLogger(staffMakePayment.class.getName()).log(Level.SEVERE, null, ex);
         }
         
         if (userFound==false){
             JOptionPane.showMessageDialog(null,"Resident not found","Invalid ID",JOptionPane.WARNING_MESSAGE);
             
         }
         
         else{
             returnInterface = false;
             DefaultTableModel clear_table = (DefaultTableModel)billTable.getModel();
             while (clear_table.getRowCount()>0){
                clear_table.removeRow(0);
                }
             DefaultTableModel specificUserTable = (DefaultTableModel)billTable.getModel();
                for (int index =1;index<billArray.length;index++){
                if (billArray[index][1].equals(userToSearch)){
                    specificUserTable.addRow(billArray[index]);

             
                }}}

    }//GEN-LAST:event_searchButtonActionPerformed

    private void makepaymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makepaymentButtonActionPerformed
       DefaultTableModel makepaymentTable = (DefaultTableModel)billTable.getModel(); 
       int selectedRowIndex = billTable.getSelectedRow();
       System.out.println(selectedRowIndex);
       if (selectedRowIndex == -1){
           JOptionPane.showMessageDialog(null,"Please select a row to make payment","No row selected",JOptionPane.INFORMATION_MESSAGE);
       } 
       
       else if (billTable.getSelectedRowCount()>1){
           JOptionPane.showMessageDialog(null,"Please select only one row to make payment","More than one row are selected",JOptionPane.INFORMATION_MESSAGE);
       }
       
       
       else{
           String selectedPaymentStatus = makepaymentTable.getValueAt(selectedRowIndex,5).toString();
           if (!selectedPaymentStatus.equals("Outstanding")){
                JOptionPane.showMessageDialog(null,"Payment is completed for this bill","Payment Error",JOptionPane.INFORMATION_MESSAGE);
           }
           else{
                int confirmMakePayment = JOptionPane.showConfirmDialog(null,"Confirm to make payment","Payment Confirmation",JOptionPane.OK_CANCEL_OPTION);
                System.out.println(confirmMakePayment);
                if (confirmMakePayment==0){
                    generateReceipt receipt = new generateReceipt(staffID,staffName,"Staff");
                    LocalDate currDate =LocalDate.now();
                    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                    String paymentDate = currDate.format(dateFormatter);
                    JOptionPane.showMessageDialog(null,"Payment is made successfully","Successful Payment",JOptionPane.INFORMATION_MESSAGE);
                    makepaymentTable.setValueAt("Completed",selectedRowIndex,5);
                    makepaymentTable.setValueAt(paymentDate,selectedRowIndex,6);
                    for (int i=0;i<billArray.length;i++){
                        if ((billArray[i][1]==makepaymentTable.getValueAt(selectedRowIndex,1))&&(billArray[i][4]==makepaymentTable.getValueAt(selectedRowIndex,4))){
                            billArray[i][5]="Completed";
                            billArray [i][6]= paymentDate;
                        }
                    }
                    try {
                        BufferedWriter writer = new BufferedWriter(new FileWriter("BillList.txt"));
                        for (int i =0;i<billArray.length;i++){
                            writer.write(billArray[i][0]+","+billArray[i][1]+","+billArray[i][2]+","+billArray[i][3]+","+billArray[i][4]+","+billArray[i][5]+","+billArray[i][6]+"\n");
                        }
                        writer.close();
                    } catch (IOException ex) {
                        Logger.getLogger(staffMakePayment.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    int generate_receipt = JOptionPane.showConfirmDialog(null,"Do you want to generate receipt?","Generate receipt",JOptionPane.YES_NO_OPTION);
                    if (generate_receipt==0){
                        receipt.name.setText(makepaymentTable.getValueAt(selectedRowIndex,0).toString());
                        receipt.ID.setText(makepaymentTable.getValueAt(selectedRowIndex,1).toString());
                        receipt.paymentTitle.setText(makepaymentTable.getValueAt(selectedRowIndex,2).toString());
                        receipt.amount.setText(makepaymentTable.getValueAt(selectedRowIndex,3).toString());
                        receipt.total.setText(makepaymentTable.getValueAt(selectedRowIndex,3).toString());
                        receipt.date.setText(makepaymentTable.getValueAt(selectedRowIndex,6).toString());
                        receipt.cashier.setText(staffName);
                        receipt.show();
                        dispose();
                    }
                    
 

                   
               }
               
           }

           }
    }//GEN-LAST:event_makepaymentButtonActionPerformed

    private void generateReceiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReceiptButtonActionPerformed
       DefaultTableModel generateReceiptTable = (DefaultTableModel)billTable.getModel(); 
       int selectedRowIndex = billTable.getSelectedRow();
       System.out.println(selectedRowIndex);
       if (selectedRowIndex == -1){
           JOptionPane.showMessageDialog(null,"Please select a row to generate receipt","No row selected",JOptionPane.INFORMATION_MESSAGE);
       }
       
       else if (billTable.getSelectedRowCount()>1){
           JOptionPane.showMessageDialog(null,"Please select only one row to generate receipt","More than one row are selected",JOptionPane.INFORMATION_MESSAGE);
       }
       
       else{
           String selectedPaymentStatus = generateReceiptTable.getValueAt(selectedRowIndex,5).toString();
           if (!selectedPaymentStatus.equals("Completed")){
                JOptionPane.showMessageDialog(null,"Payment is not completed yet","Payment Incomplete",JOptionPane.INFORMATION_MESSAGE);
           }
           
           else{
              generateReceipt receipt = new generateReceipt(staffID,staffName,"Staff");
               
               
               receipt.name.setText(generateReceiptTable.getValueAt(selectedRowIndex,0).toString());
               receipt.ID.setText(generateReceiptTable.getValueAt(selectedRowIndex,1).toString());
               receipt.paymentTitle.setText(generateReceiptTable.getValueAt(selectedRowIndex,2).toString());
               receipt.amount.setText(generateReceiptTable.getValueAt(selectedRowIndex,3).toString());
               receipt.total.setText(generateReceiptTable.getValueAt(selectedRowIndex,3).toString());
               receipt.date.setText(generateReceiptTable.getValueAt(selectedRowIndex,6).toString());
               receipt.cashier.setText(staffName);
               receipt.show();
               dispose();
           }
       }
    }//GEN-LAST:event_generateReceiptButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (returnInterface==true){
            staffInterface staff_interface = new staffInterface(staffID);
            staff_interface.show();
            dispose();
        }
        
        else{
            
            DefaultTableModel clear_table = (DefaultTableModel)billTable.getModel();
             while (clear_table.getRowCount()>0){
                clear_table.removeRow(0);
             }
          
            DefaultTableModel bill_table = (DefaultTableModel)billTable.getModel();
            for (int i =1;i<billArray.length;i++){
                bill_table.addRow(billArray[i]);
            }
            returnInterface = true;
            
        }

    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(staffMakePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(staffMakePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(staffMakePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(staffMakePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new staffMakePayment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTable billTable;
    private javax.swing.JButton generateReceiptButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton makepaymentButton;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
